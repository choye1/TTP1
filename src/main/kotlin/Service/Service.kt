package Service
import Entity.Book
import Entity.Person

abstract class Service {
    companion object {
        fun clearConsole() {
            try {
                val process = ProcessBuilder("cmd", "/c", "cls").inheritIO().start()
                process.waitFor()
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
        fun AddBook(books: MutableList<Book>){
            val book = Book()
            println("–û, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–∏–≥–∞?")
            val name = readln()
            if(name.isNotEmpty()){
                book.name = name
            }
            else{
                println("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
            }
            println("–°–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤?")
            val input = readln()
            var count = 0
            if (input.isNotEmpty()){
                count = input.toInt()
            }
            if (count > 0) {
                book.count = count
                book.access = count
            }
            else {
                println("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
            }

            books.add(book)
            println("–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        }

        fun AddPerson(persons: MutableList<Person>, name: String = ""):Person?{
            if(name!=""){
                val person = Person(name)
                persons.add(person)
                return person
            }

            println("–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            val personName = readln()
            for (person in persons){
                if (person.name == personName){
                    println("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!!! \n")
                    return null
                }
            }

            persons.add(Person(personName))
            return null
        }

        fun SearchBook(books: MutableList<Book>): Boolean {
            println("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–∏–≥–∞?")
            val name = readln()
            for (book in books){
                return if (book.name == name) {
                    println("–ö–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞! –í—Å–µ–≥–æ –∏—Ö ${book.count}. –î–æ—Å—Ç—É–ø–Ω–æ: ${book.access}. \n");
                    true
                } else{
                    println("–¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–µ—Ç :( \n")
                    false
                }
            }

            println("–¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–µ—Ç :(")
            return false
        }

        fun GiveBook(books: MutableList<Book>, persons: MutableList<Person>){
            println("–ö–∞–∫—É—é –∫–Ω–∏–≥—É —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å?")
            val bookName = readln()
            val selectedBook: Book? = searchBook(books,bookName)


            if (selectedBook != null) {
                println("–ù–∞ –∫–æ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å?")
            }
            else {
                println("–¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ —É –Ω–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç \n")
                return
            }

            val personName = readln()
            var selectedPerson: Person? = searchPerson(persons, personName)



            if (selectedPerson == null) {
                println("–†–∞–Ω—å—à–µ –≤–∞—Å –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º—Å—è ( ¬¥ÔΩ•ÔΩ•)Ôæâ(._.`)")
                selectedPerson = AddPerson(persons, personName)

            }

            if (selectedPerson != null) {
                selectedPerson.books.add(selectedBook)
                selectedBook.access--
                println("–•–æ—Ä–æ—à–æ! –ù–∞ –∏–º—è ${selectedPerson.name} –∑–∞–ø–∏—Å–∞–Ω–∞ –∫–Ω–∏–≥–∞ ${selectedBook.name}")
            }

            else{
                println("–ü–æ—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É..")
            }


        }

        fun ReturnBook(books: MutableList<Book>, persons: MutableList<Person>){
            println("–ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–Ω–∏–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ")
            val personName = readln()
            println("–°–µ–∫—É–Ω–¥—É, –Ω–∞–π–¥—É –≤–∞—Å –≤ —Å–≤–æ–µ–º —Å–ø–∏—Å–∫–µ")
            val person = searchPerson(persons, personName)
            if (person == null){
                println("–¢–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É –Ω–∞—Å –Ω–µ—Ç T_T ")
                return
            }

            println("–•–æ—Ä–æ—à–æ, –Ω–∞—à–µ–ª. –ö–∞–∫—É—é –∫–Ω–∏–≥—É —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å? –ù–∞ –≤–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ:")
            for (book in person.books){
                println(" -> ${book.name}")
            }
            val book = searchBook(books, readln())
            if(book == null){
                println("–£ –Ω–∞—Å —Ç–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ ü§®")
                return
            }

            if(!person.books.contains(book)){
                println("–í—ã —Ç–∞–∫—É—é –∫–Ω–∏–≥—É –Ω–µ –±—Ä–∞–ª–∏ —É –Ω–∞—Å!")
                return
            }

            person.books.remove(book)
            book.count++
            println("–£—Å–ø–µ—à–Ω–æ! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –µ—â—ë!")



        }

        fun ShowAllBook(books: MutableList<Book>){
            println("–í–æ—Ç –∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ —É –Ω–∞—Å –µ—Å—Ç—å:")
            for(book in books){
                println(book.name)
                return
            }

            println("–ü–æ–∫–∞ —á—Ç–æ —É –Ω–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–∏–≥ :(")
        }

        fun searchPerson(persons: MutableList<Person>, name:String):Person?{
            for (person in persons){
                if (person.name.contains(name)){
                    return person
                }
            }
            return null
        }

        fun searchBook(books: MutableList<Book>, name: String):Book?{
            for (book in books){
                if (book.name == name && book.count > 0){
                    return book
                }
            }
            return null
        }



    }


}
